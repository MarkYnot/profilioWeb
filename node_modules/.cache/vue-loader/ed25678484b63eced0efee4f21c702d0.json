{"remainingRequest":"/Users/mark/Desktop/Master/modeling-base software engineering/banvas/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mark/Desktop/Master/modeling-base software engineering/banvas/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mark/Desktop/Master/modeling-base software engineering/banvas/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mark/Desktop/Master/modeling-base software engineering/banvas/client/src/views/videoPlay.vue?vue&type=template&id=7cdb3625&scoped=true&","dependencies":[{"path":"/Users/mark/Desktop/Master/modeling-base software engineering/banvas/client/src/views/videoPlay.vue","mtime":1636655924929},{"path":"/Users/mark/Desktop/Master/modeling-base software engineering/banvas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mark/Desktop/Master/modeling-base software engineering/banvas/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mark/Desktop/Master/modeling-base software engineering/banvas/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mark/Desktop/Master/modeling-base software engineering/banvas/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}