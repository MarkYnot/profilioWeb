{"remainingRequest":"/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/src/views/Ecommerce.vue?vue&type=template&id=4c615d76&scoped=true&","dependencies":[{"path":"/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/src/views/Ecommerce.vue","mtime":1689619941739},{"path":"/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/node_modules/cache-loader/dist/cjs.js","mtime":1688868126000},{"path":"/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1688868126000},{"path":"/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/node_modules/cache-loader/dist/cjs.js","mtime":1688868126000},{"path":"/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/node_modules/vue-loader/lib/index.js","mtime":1688868126000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}