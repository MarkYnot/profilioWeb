{"remainingRequest":"/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/client/src/views/Ecommerce.vue?vue&type=template&id=4c615d76&scoped=true&","dependencies":[{"path":"/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/client/src/views/Ecommerce.vue","mtime":1688747668473},{"path":"/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mark/Desktop/Job-hunting/做过的项目/profilio-web/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAidmlkZW9DZW50cmVDb250YWluZXIiIH0sCiAgICBbCiAgICAgIF9jKCJ0cmFuc2l0aW9uIiwgeyBhdHRyczogeyBuYW1lOiAiZmFkZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc2VhcmNoLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInRoaXMuc2VhcmNoIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzZWFyY2hTdGF0dXMiCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygidHJhbnNpdGlvbiIsIHsgYXR0cnM6IHsgbmFtZTogInNlYXJjaFRyYW5zaXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnNlYXJjaCwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0aGlzLnNlYXJjaCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2VhcmNoaW5nSW5wdXQiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc2VhcmNoSW5wdXQsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJzZWFyY2hJbnB1dCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHBsYWNlaG9sZGVyOiAiVHlwZSBBbmQgUHJlc3MgRW50ZXIgdG8gU2VhcmNoIiB9LAogICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uc2VhcmNoSW5wdXQgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zZWFyY2hpbmcoJGV2ZW50KQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNlYXJjaElucHV0ID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJhLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjbG9zZUljb24iLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJjbG9zZSIsIHRoZW1lOiAib3V0bGluZWQiIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jbG9zZVNlYXJjaCgpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICB0aGlzLnJlc3VsdFJldHVybgogICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicmVzdWx0U2V0IiB9LAogICAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLnJlc3VsdExpc3QsIGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgeyBrZXk6IHJlc3VsdC5pZCwgc3RhdGljQ2xhc3M6ICJzZWFyY2hSZXN1bHQiIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86IHJlc3VsdC5saW5rIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBhbHQ6ICIiLCBzcmM6IHJlc3VsdC5waG90b0xpbmsgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicmVzdWx0RnJhbWUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdihfdm0uX3MocmVzdWx0Lm5hbWUpKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoX3ZtLl9zKHJlc3VsdC5zdGFjaykpXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bHRDYXRlZ29yeSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhyZXN1bHQuY2F0ZWdvcnkpKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICB0aGlzLnplcm9SZXN1bHQKICAgICAgICAgICAgICA/IF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInplcm9SZXN1bHQiIH0sIFtfdm0uX3YoIk5vIFJlc3VsdCIpXSkKICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5zcGlubmVyLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJzcGlubmVyIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwc3dwX19wcmVsb2FkZXJfX2ljbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHN3cF9fcHJlbG9hZGVyX19jdXQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwc3dwX19wcmVsb2FkZXJfX2RvbnV0IiB9KQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJ0cmFuc2l0aW9uIiwgeyBhdHRyczogeyBuYW1lOiAic2VhcmNoVHJhbnNpdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnBvcHVsYXIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidGhpcy5wb3B1bGFyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJMYXN0ZXN0UmVzdWx0IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkxhdGVzdCByZXN1bHQiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygidHJhbnNpdGlvbiIsIHsgYXR0cnM6IHsgbmFtZTogInNlYXJjaFRyYW5zaXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnBvcHVsYXIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidGhpcy5wb3B1bGFyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzZWFyY2hNYXRjaCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLnByb2plY3RMaXN0LCBmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7IGtleTogaXRlbS5pZCwgc3RhdGljQ2xhc3M6ICJtYXRjaEludHJvIiB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86IGl0ZW0ubGluayB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsgYXR0cnM6IHsgYWx0OiAiIiwgc3JjOiBpdGVtLnBob3RvTGluayB9IH0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1hdGNoVGV4dCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdihfdm0uX3MoaXRlbS5uYW1lKSldKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoX3ZtLl9zKGl0ZW0uc3RhY2spKV0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJocEhlYWRlciIgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiSGVhZGVyIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNlYXJjaEJhciIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBzbG90OiAic2VhcmNoIiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc3RhcnRTZWFyY2goKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc2xvdDogInNlYXJjaCIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJhLWljb24iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidyIsCiAgICAgICAgICAgICAgICAgIHN0eWxlOiB7IGZvbnRTaXplOiAiMnZ3IiwgY29sb3I6ICJ3aGl0ZSIgfSwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInNlYXJjaCIsIHRoZW1lOiAib3V0bGluZWQiIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJTRUFSQ0giKV0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJidXR0b24iLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2lkZUJhckJ1dHRvbiIsCiAgICAgICAgICBzdHlsZTogX3ZtLmNvbGxhcHNlZCA/ICJjb2xvcjogYmxhY2siIDogImNvbG9yOiB3aGl0ZSIsCiAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnRvZ2dsZUNvbGxhcHNlZCB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiYS1pY29uIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImJhckJ1dHRvbkljb24iLAogICAgICAgICAgICBzdHlsZTogeyBmb250U2l6ZTogIjEuOHZ3IiwgbWFyZ2luVG9wOiAiMXZoIiB9LAogICAgICAgICAgICBhdHRyczogeyB0eXBlOiBfdm0uY29sbGFwc2VkID8gImNsb3NlIiA6ICJtZW51LWZvbGQiIH0KICAgICAgICAgIH0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJzcGFuIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogIm5hbWUiLAogICAgICAgICAgc3R5bGU6IF92bS5jb2xsYXBzZWQgPyAiY29sb3I6IGJsYWNrIiA6ICJjb2xvcjogd2hpdGUiLAogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdm0ucmVkaXJlY3RpbmcoKQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCJKVU5KSUUgTElOIildCiAgICAgICksCiAgICAgIF9jKCJ0cmFuc2l0aW9uIiwgeyBhdHRyczogeyBuYW1lOiAiU2lkZWJhckZhZGUiIH0gfSwgWwogICAgICAgIHRoaXMuY29sbGFwc2VkCiAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJTaWRlQmFyIiB9LAogICAgICAgICAgICAgIFtfYygiU2lkZUJhciIsIHsgYXR0cnM6IHsgY29sbGFwc2VkOiBfdm0uY29sbGFwc2VkIH0gfSldLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgOiBfdm0uX2UoKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJwcm9qZWN0SW50cm9kdWN0aW9uIiwKICAgICAgICAgIHN0eWxlOiB7IGJhY2tncm91bmQ6ICJ1cmwoIiArIF92bS5iYWNrSW1nICsgIikgNTAlIDUwJSAvIGNvdmVyIiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lclNoYWRvdyIgfSksCiAgICAgICAgICB0aGlzLnBhZ2UKICAgICAgICAgICAgPyBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJpbnRyb1RleHQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiRWNvbW1lcmNlIFdlYnNpdGUiKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgIHRoaXMucGFnZQogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgInVsIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJpbnRyb0NvbnRlbnQiLCBhdHRyczogeyByb2xlOiAibGlzdCIgfSB9LAogICAgICAgICAgICAgICAgW192bS5fbSgwKSwgX3ZtLl9tKDEpLCBfdm0uX20oMildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHJvamVjdENvbnRlbnQiLCBvbjogeyBzY3JvbGw6IF92bS5oYW5kbGVTY3JvbGwgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImRhcmtNb2RlIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImEtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0eWxlOiB7IGZvbnRTaXplOiAiMS40dnciLCBjb2xvcjogImJsYWNrIiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInNlYXJjaCIsIHRoZW1lOiAib3V0bGluZWQiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIkRhcmtNb2RlIildKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAicHVibGlzaGVkIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiUHVibGlzaGVkIGF0IDE4LzEyLzIwMjIiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0TGVuZ3RoIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiIC0gN21pbnMgcmVhZGluZyIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFRoZSBvdmVydmlldyBvZiB0aGlzIHByb2plY3QgaXMgdG8gYnVpbGQgYSBFY29tbWVyY2Ugd2ViIGFwcGxpY2F0aW9uIHdoaWNoIG5hbWVkIFBob25lWm9uZS4gUGhvbmVab25lIHByb3ZpZGVzIHVzZXJzIHdpdGggYW4gZWFzeS10cmFkaW5nIHBsYXRmb3JtIHdoZXJlIHVzZXJzIGNvdWxkIGNvbnZlbmllbnRseSBvYnRhaW4gdGhlaXIgcHJvZHVjdHMgYnkgb3JkZXJpbmcgb24gdGhpcyBwbGF0Zm9ybS4gIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgSW4gdGhpcyBhcnRpY2xlLCBpIHdpbGwgaW50cm9kdWNlIHRoZSBjcnVjaWFsIG1vZHVsZXMgb2YgdGhpcyB3ZWIgYXBwbGljYXRpb24gYW5kIGhvdyB0byBpbXBsZW1lbnQgZWFjaCBvZiBmdW50aW9uYWxpdGllcyBpbiB0aGUgbW9kdWxlcy4gSW4gYWRkaXRpb24sIHRoaXMgYXJ0aWNsZSB3aWxsIG9ubHkgZm9jdXMgb24gdGhlIGltcGxlbWVudGF0aW9uIG9mIHNvbWUgY3J1Y2lhbCBmdW50aW9uYWxpdHksIGZlZWwgZnJlZSB0byBhY2Nlc3MgdGhlIHByb2plY3QgaW4gbXkgZ2l0aHViLiAiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJIZXJlIGlzIHRoZSBwb3JqZWN0IGRlbW86IildKSwKICAgICAgICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBsYXllclNldHRpbmciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6ICJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC91QVplZ1Y2V2JDcyIsCiAgICAgICAgICAgICAgICB0aXRsZTogIllvdVR1YmUgdmlkZW8gcGxheWVyIiwKICAgICAgICAgICAgICAgIGZyYW1lYm9yZGVyOiAiMCIsCiAgICAgICAgICAgICAgICBhbGxvdzoKICAgICAgICAgICAgICAgICAgImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiLAogICAgICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuOiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBhdHRyczogeyBpZDogInRhYmxlVGl0bGUiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiVGFibGUgb2YgdGhlIGNydWNpYWwgZnVudGlvbmFsaXRpZXMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCIxLkhvbWUgcGFnZSIpXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHRCZWZvcmVDb2RlIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJQbGVhc2UgcmVhY2ggdGhlIGh0bWwgY29kZToiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImhvbWVQYWdlQ29kZSIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiQ29kZUJsb2NrIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGNvZGU6CiAgICAgICAgICAgICAgICAgICAgICAiZnVuY3Rpb24gaGVsbG8oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSGVsbG8sIHdvcmxkIScpO1xuICAgICAgICAgICAgICAgICAgICB9IiwKICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZTogImphdmFzY3JpcHQiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fbSg0KSwKICAgICAgICAgICAgX3ZtLl9tKDUpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImdyZXlEaXNwbGF5IiwKICAgICAgICAgICAgICAgIHN0eWxlOiB7IGhlaWdodDogIjE5JSAhaW1wb3J0YW50IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJUaGUgY29kZSBpbiBkaWFncmFtIGluZGljYXRlIGhvdyB0aGUgaHRtbCBlbGVtZW50IHN0eWxlIGNvdWxkIGJlIG1haW5pcHVsYXRlZCBieSBzZXR0aW5nIHNhbWUgYSBjbGFzc25hbWUuIEhvd2V2ZXIsIHRoZSBnZXRFbGVtZW50QnlJZCgpIGFsbG93IHlvdSB0byBtYWluaXB1bGF0ZSBodG1sIGVsZW1lbnQgc3R5bGUgdG8geW91ciBwcmVmZXJlbmNlIGJ5IHVzaW5nIG1ldGhvZHMgbGlrZSBzZXRBdHRyaWJ1dGUoKSBvciBhcHBlbmQoKS4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IGF0dHJzOiB7IGlkOiAiY3NzVGV4dCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJQbGVhc2UgcmVhY2ggdGhlIGNzcyBjb2RlOiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImhvbWVQYWdlQ3NzIiB9KSwKICAgICAgICAgICAgX3ZtLl9tKDYpLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyZXlEaXNwbGF5Iiwgc3R5bGU6IHt9IH0sIFtfdm0uX20oNyldKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJkaXZpc2lvbkJhciIgfSksCiAgICAgICAgICAgIF9jKCJoMiIsIHsgc3R5bGU6IHsgbWFyZ2luTGVmdDogIjAuN3Z3IiB9IH0sIFtfdm0uX3YoIjIuTG9naW4iKV0pLAogICAgICAgICAgICBfdm0uX20oOCksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibG9naW5IdG1sIiB9KSwKICAgICAgICAgICAgX3ZtLl9tKDkpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImdyZXlEaXNwbGF5IiwKICAgICAgICAgICAgICAgIHN0eWxlOiB7IGhlaWdodDogIjIzJSAhaW1wb3J0YW50IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl9tKDEwKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dEJlZm9yZUNvZGUiLAogICAgICAgICAgICAgICAgc3R5bGU6IHsgbWFyZ2luVG9wOiAiMnZoICFpbXBvcnRhbnQiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIkluIHRoaXMgcGFydCwgd2Ugd2lsbCBmb2N1cyBvbiB0aGUgZnJvbnQtZW5kIEpTIGFuZCBCYWNrZW5kIEpTIGNvZGUsIExldHMgaGF2ZSBhIGxvb2sgYXQgdGhlIGh0bWwgYW5kIEpTIGNvZGUgZm9yIHRoaXMgZnVuY3Rpb246IgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICkKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygibGkiLCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZ3JlZW5UaXRsZSIgfSwgW192bS5fdigiV0VCU0lURSIpXSksCiAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImluZm9ybWF0aW9uIiB9LCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSB3ZWJzaXRlIGNvdWxkIGJlIHRha2VuIGEgd2hpbGUgdG8gYmUgbG9hZGVkIHNpbmNlIHRoZSBwcm9qZWN0IGlzIG9uIGEgZnJlZSBIZXJva3UgbWFjaGluZSIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygibGkiLCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZ3JlZW5UaXRsZSIgfSwgW192bS5fdigiR0lUSFVCIildKSwKICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiaW5mb3JtYXRpb24iIH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJnaXRodWJMaW5rIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vTWFya1lub3QvRUNvbW1lcmNlIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiaHR0cHM6Ly9naXRodWIuY29tL01hcmtZbm90L0VDb21tZXJjZSIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIihDbGljayBoZXJlIHRvIGNoZWNrIG91dCB0aGUgZnVydGhlciBkZXNjcmlwdGlvbiBhYm91dCB0aGUgcHJvamVjdCkiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImxpIiwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyZWVuVGl0bGUiIH0sIFtfdm0uX3YoIlNUQUNLIildKSwKICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiaW5mb3JtYXRpb24iIH0sIFsKICAgICAgICBfdm0uX3YoIk5vZGVKUywgUmVhY3RKUywgTW9uZ29EQiwgRXhwcmVzc0pTLCBFc2xpbnRKUyxNRDUsIEJhc2U2NCIpCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidWwiLCBbCiAgICAgIF9jKCJsaSIsIFtfYygiYSIsIFtfdm0uX3YoIkhvbWUgcGFnZSIpXSldKSwKICAgICAgX2MoImxpIiwgW19jKCJhIiwgW192bS5fdigiTG9naW4iKV0pXSksCiAgICAgIF9jKCJsaSIsIFtfYygiYSIsIFtfdm0uX3YoIkNoYW5nZSBBdmFudGFyIildKV0pLAogICAgICBfYygibGkiLCBbX2MoImEiLCBbX3ZtLl92KCJTaG9wcGluZyBDYXJ0IildKV0pLAogICAgICBfYygibGkiLCBbX2MoImEiLCBbX3ZtLl92KCJDaGFuZ2UgVXNlcm5hbWUvUGFzc3dvcmQiKV0pXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJzcGFuIiwgWwogICAgICBfdm0uX3YoCiAgICAgICAgIuKAoiBTdGVwIDEuIFNrZXRjaCAzIGZyYW1lcyBhcyBhIGh0bWwgY29udGVudCBjb250YWluZXIgYnkgdXNpbmcgZGl2IHRhZyBhbmQgbWFpbnB1bGF0ZSBpdHMgc3R5bGUgYnkgY3NzLiAiCiAgICAgICksCiAgICAgIF9jKCJiciIpLAogICAgICBfYygiYnIiKSwKICAgICAgX3ZtLl92KAogICAgICAgICIg4oCiIFN0ZXAgMi4gSWYgeW91IGF0dGVtcHQgdG8gbWFpbnB1bGF0ZSB0aGUgZm9ybSBvZiBodG1sIGVsZW1lbnQgbGlrZSB0aGUgZGl2IGZyYW1lIHlvdSBqdXN0IHNrZXRjaGVkLCBlaXRoZXIgc2ltcGx5IHdyaXRlIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdJRE5hbWUnKSBmb3Igc2luZ2xlIGVsZW1lbnQgc2VsZWN0aW9uIG9yIHdyaXRlIGRvY3VtZW50LmdldEVsZW1lbnRCeUNsYXNzTmFtZSgnY2xhc3NOYW1lJykgZm9yIG11bHRpcGxlIGVsZW1lbnRzIHNlbGVjdGlvbi4gIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIikKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZ3JleURpc3BsYXkiIH0sIFsKICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBnZXRFbGVtZW50QnlJZCgpIGFuZCBnZXRFbGVtZW50QnlDbGFzc05hbWUoKSBtZXRob2QgYXJlIHRoZSBtb3N0IGNvbW1vbiBtZXRob2RzIGluIHRoZSBIVE1MIERPTS4gSXQgaXMgdXNlZCBhbG1vc3QgZXZlcnkgdGltZSB5b3Ugd2FudCB0byByZWFkIG9yIGVkaXQgYW4gSFRNTCBlbGVtZW50LiAiCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInNwYW4iLCBbCiAgICAgIF92bS5fdigKICAgICAgICAi4oCiIFN0ZXAgMS4gSW4gdGhlIGNzcyBwYXJ0LCB3ZSBuZWVkIHRvIGlkZW50aWZ5IHRoZSBjbGFzc25hbWUgb3IgSUQgd2Ugc2V0IGluIHRoZSBIVE1MLiBTeW1ib2wgIyBpcyB0aGUgSUQgc2VsZWN0b3Igd2hpY2ggYWltIHRvIHNlbGVjdCBodG1sIGVsZW1lbnRzIHdpdGggaXRzIHVuaXF1ZSBJRC4gU3ltYm9sIC4gbGV0cyB5b3UgZGVmaW5lIGNvdW50ZXIgc3R5bGVzIGlubGluZSB3aXRoIGNsYXNzbmFtZSwgZGlyZWN0bHkgYXMgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgc3VjaCBhcyBsaXN0LXN0eWxlIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIOKAoiBTdGVwIDIuIFRoaXMgcHJvamVjdCBpcyBiYXNlZCBvbiBncmlkIGxheW91dCwgZWFjaCBodG1sIGVsZW1lbnRzIGlzIHBsYWNlZCBpbiBhIHNwZWNpZmljIHBvc3Rpb24uIHlvdSBuZWVkIHRvIGRlY2lkZSBzaXplIG9mIGVhY2ggY29sdW1ucyBhbmQgcm93cyBpbiB0aGUgcGFnZSBieSBtYWluaXB1bGF0aW5nIHRoZSBzaXplIG9mIGdyaWQtdGVtcGxhdGUtcm93cyBhbmQgZ3JpZC10ZW1wbGF0ZS1jb2x1bW4uIFRoZW4sIEVhY2ggaHRtbCBlbGVtZW50IHdpbGwgYmUgcGxhY2VkIGluIHNwZWNpZmljIGdyaWQgYnkgYWRqdXN0aW5nIGdyaWQtcm93IGFuZCBncmlkLWNvbHVtbi4gIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiIOKAoiBTdGVwIDMuIE5leHQgd2UgbmVlZCB0byBzZXQgdXAgY3NzIHN0eWxlIG9mIGVhY2ggaHRtbCBlbGVtZW50IGJ5IGFkanVzdGluZyB0aGllciBhdHRyaWJ1dGUgbGlrcyBtYXJnaW4sIHBhZGRpbmcsIHNpemUgdG8gZW5zdXJlIGFsbCBlbGVtZW50cyBpbiBhbiBhcHByb3ByaWF0ZSBwb3NpdGlvbi4gIgogICAgICApCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygic3BhbiIsIFsKICAgICAgX3ZtLl92KAogICAgICAgICJDU1MgZ3JpZCBsYXlvdXQgb3IgQ1NTIGdyaWQgY3JlYXRlcyBjb21wbGV4IHJlc3BvbnNpdmUgd2ViIGRlc2lnbiBncmlkIGxheW91dHMgbW9yZSBlYXNpbHkgYW5kICIKICAgICAgKSwKICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImNvbnNpc3RlbnRseSBhY3Jvc3MgYnJvd3NlcnMiKV0pLAogICAgICBfdm0uX3YoIi4gWW91IGNvdWxkIHVzZSBncmlkIGxheW91dCB0byBhY2hpZXZlICIpLAogICAgICBfYygic3Ryb25nIiwgW192bS5fdigiYWNyb3NzLXBsYXRmb3JtIHdlYiByZXNwb25zaXZlIGRlc2lnbi4iKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0QmVmb3JlQ29kZSIgfSwgWwogICAgICBfdm0uX3YoCiAgICAgICAgIkluIHRoaXMgcGFydCwgd2Ugd2lsbCBmb2N1cyBvbiB0aGUgZnJvbnQtZW5kIEpTIGFuZCBCYWNrZW5kIEpTIGNvZGUsIExldHMgaGF2ZSBhIGxvb2sgYXQgdGhlIGh0bWwgIgogICAgICApLAogICAgICBfYygiYnIiKSwKICAgICAgX3ZtLl92KCJhbmQgSlMgY29kZSBmb3IgdGhpcyBmdW5jdGlvbjoiKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInNwYW4iLCBbCiAgICAgIF92bS5fdigKICAgICAgICAi4oCiIFN0ZXAgMS4gU2ltaWxhcmx5IHNrZXRjaCBmcmFtZXMgYXMgYSBodG1sIGNvbnRlbnQgY29udGFpbmVyIGJ5IHVzaW5nIGRpdiB0YWcgYW5kIG1haW5wdWxhdGUgaXRzIHN0eWxlIGJ5IGNzcyIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoCiAgICAgICAgIiDigKIgU3RlcCAyLiBUaGlzIHByb2plY3QgaXMgYmFzZWQgb24gZ3JpZCBsYXlvdXQsIGVhY2ggaHRtbCBlbGVtZW50cyBpcyBwbGFjZWQgaW4gYSBzcGVjaWZpYyBwb3N0aW9uLiB5b3UgbmVlZCB0byBkZWNpZGUgc2l6ZSBvZiBlYWNoIGNvbHVtbnMgYW5kIHJvd3MgaW4gdGhlIHBhZ2UgYnkgbWFpbmlwdWxhdGluZyB0aGUgc2l6ZSBvZiBncmlkLXRlbXBsYXRlLXJvd3MgYW5kIGdyaWQtdGVtcGxhdGUtY29sdW1uLiBUaGVuLCBFYWNoIGh0bWwgZWxlbWVudCB3aWxsIGJlIHBsYWNlZCBpbiBzcGVjaWZpYyBncmlkIGJ5IGFkanVzdGluZyBncmlkLXJvdyBhbmQgZ3JpZC1jb2x1bW4uICIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoCiAgICAgICAgIiDigKIgU3RlcCAzLiBOb3csIHlvdSBjYW4gcGxhY2UgZGlmZmVyZW50IGh0bWwgZWxlbWVudHMgbGlrZSBpbnB1dCwgYnV0dG9tIGludG8gdGhlIGdyaWRzLiAiCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJzcGFuIiwgWwogICAgICBfdm0uX3YoCiAgICAgICAgIlRoZXJlIGFyZSB0YWdzIHRoYXQgY29tbW9ubHkgdXNlIGluIHdlYiBkZXZlbG9wbWVudCBpbmNsdWRpbmcgaW5wdXQsIGgxLCBidXR0b24gYW5kIGltZy4gVGhlIGlucHV0IHRhZyBzcGVjaWZpZXMgYW4gaW5wdXQgZmllbGQgd2hlcmUgIgogICAgICApLAogICAgICBfYygic3Ryb25nIiwgW192bS5fdigidGhlIHVzZXIgY2FuIGVudGVyIGRhdGEgIildKSwKICAgICAgX3ZtLl92KAogICAgICAgICJ3aGlsZSB0aGUgaDEgdGFnIGFyZSB1c2VkIHRvIGRlZmluZSBIVE1MIGhlYWRpbmcuIFRoZSBidXR0b24gdGFnIGluIEhUTUwgaXMgdXNlZCB0byBkZWZpbmUgdGhlIGNsaWNrYWJsZSBidXR0b24gd2hpbGUgVGhlIGltZyB0YWcgaXMgdXNlZCB0byBlbWJlZCBhbiBpbWFnZSBpbiBhbiBIVE1MIHBhZ2UuICIKICAgICAgKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}